C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MYSELF
OBJECT MODULE PLACED IN .\Objects\myself.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE myself.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\SYSTEM;..\HARDWARE;..\USER) 
                    -DEBUG OBJECTEXTEND PRINT(.\Listings\myself.lst) TABS(2) OBJECT(.\Objects\myself.obj)

line level    source

   1          #include  "config.h"
   2          #include  "intrins.h"
   3          #include  "Serial.h"//串口1(P3.0/RxD, P3.1/TxD)
   4          #include <myself.h>
   5          #include  "STC8EEPROM.h"
   6          #include  "string.h"
   7          bit bFlagTimer0=0,bFlag2ms=0,bFlag3s=0;
   8          bit TestKeyLastTime=1;
   9          unsigned char xdata cJudgeKey=0;//用于判断按键的变量
  10          unsigned char xdata T0Counter2ms=0;
  11          unsigned int xdata T0Counter3s=0;//3s计数器
  12          
  13          unsigned char xdata KeyNum[3]={0,0,0};//存放连续3次判断的键值
  14          unsigned char code KeyThreshold[7]={0x38,0x8D,0xBA,0xD6,0xE9,0xF8,0xFF};
  15          //  键名        电压值    测量AD值      键值区间     阈值
  16          //0 KeyStartStop 0        0x00      0x00-0x38   0x38    
  17          //1 KeyDown     1/2Vcc    0x71      0x39-0x8D   0x8D  
  18          //2 KeyMiddle   2/3Vcc    0xA9      0x8E-0xBA   0xBA
  19          //3 KeyRight    3/4Vcc    0xCB      0xBB-0xD6   0xD6
  20          //4 KeyLeft     4/5Vcc    0xE1      0xD7-0xE9   0xE9
  21          //5 KeyUp       5/6Vcc    0xF1      0xEA-0xF8   0xF8
  22          //6 NoneKey       Vcc     0xFF      0xF8-0xFF   0xFF
  23          
  24          
  25          
  26          
  27          
  28          
  29          void DelayNms110592M(int n)//延时Nms//@@11.0592MHz
  30          {
  31   1        unsigned int i;
  32   1        for(i=0;i<n;i++)
  33   1          Delay1ms110592M();
  34   1      }
  35          void DelayNms24MHz(int n)//延时Nms//@24MHz
  36          {
  37   1        unsigned int i;
  38   1        for(i=0;i<n;i++)
  39   1          Delay1ms24MHz();
  40   1      }
  41          
  42          
  43          void Delay1ms110592M()    //@11.0592MHz
  44          {
  45   1        unsigned char i, j;
  46   1      
  47   1        i = 15;
  48   1        j = 90;
  49   1        do
  50   1        {
  51   2          while (--j);
  52   2        } while (--i);
  53   1      }
  54          
C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 2   

  55          void Delay1ms24MHz()    //@24.000MHz
  56          {
  57   1        unsigned char i, j;
  58   1      
  59   1        _nop_();
  60   1        i = 32;
  61   1        j = 40;
  62   1        do
  63   1        {
  64   2          while (--j);
  65   2        } while (--i);
  66   1      }
  67          void SysClkInit()//系统时钟初始化
  68          {
  69   1      
  70   1      /**********************************************************/
  71   1      /////////选择系统时钟源
  72   1          P_SW2 = 0x80;
  73   1          CKSEL = 0x00;                               //选择内部IRC ( 默认 )
  74   1          P_SW2 = 0x00;
  75   1          
  76   1        
  77   1        
  78   1       //选择外部晶振作为系统时钟 
  79   1      //    P_SW2 = 0x80;
  80   1      //    XOSCCR = 0xc0;                              //启动外部晶振,11.0592MHz
  81   1      //    while (!(XOSCCR & 1));                      //等待时钟稳定
  82   1      //    CLKDIV = 0x00;                               //时钟不分频
  83   1      //    CKSEL = 0x01;                              
  84   1      //    P_SW2 = 0x00;
  85   1      /*********************************************************/ 
  86   1      }
  87            
  88          
  89          void Timer0Init(void)   //1毫秒@24.000MHz
  90          {
  91   1      
  92   1        AUXR |= 0x80;   //定时器时钟1T模式
  93   1        TMOD &= 0xF0;   //设置定时器模式
  94   1        TL0 = 0x40;   //设置定时初值
  95   1        TH0 = 0xA2;   //设置定时初值
  96   1        TF0 = 0;    //清除TF0标志
  97   1        TR0 = 1;    //定时器0开始计时
  98   1        ET0 = 1;  //使能定时器0中断 
  99   1      }
 100          
 101          void Timer0Interrupt() interrupt 1 using 2 //定时器0的中断
 102          {
 103   1       unsigned char xdata i=0;
 104   1        ADC_CONTR |= ADC_START;                          //启动ADC转换  
 105   1        
 106   1        T0Counter2ms++;
 107   1      
 108   1        if(T0Counter2ms>=2)
 109   1        {
 110   2          bFlag2ms=1;
 111   2          T0Counter2ms=0;
 112   2        }
 113   1        if(bFlag3s==1) T0Counter3s++;
 114   1        
 115   1      }
 116          
C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 3   

 117          
 118          //单个按键识别，本程序未用到
 119          //按键读下连续读8次（间隔2ms）,如全为按下cJudgeKey==0x00，记录到TestKeyLastTime中
 120          //在下一个连续读8次，如全为抬起cJudgeKey==0xFF，且前一状态为按下，
 121          //确认此时为按键有效按下，且有效抬起，进行相应的操作
 122          bit KeyPress(bit KeyIO)
 123          {
 124   1        cJudgeKey=(cJudgeKey<<1) | KeyIO; // 判断值左移一位 ，并将当前扫描值入最低
 125   1        if(cJudgeKey==0x00)//按键按下，状态稳定。KeyIO按下为0，抬起为1
 126   1        {
 127   2          TestKeyLastTime=KeyIO;//记录状态
 128   2        }
 129   1        else if((cJudgeKey==0xFF) && (TestKeyLastTime!=KeyIO))//按键从按下到抬起，稳定
 130   1        {
 131   2          TestKeyLastTime=KeyIO;
 132   2          
 133   2          return 1;
 134   2        }     
 135   1        else 
 136   1        {
 137   2      
 138   2        }
 139   1        return 0;
 140   1      }
 141          
 142          
 143          
 144          unsigned char JudgeKeyNum(unsigned char ADCValue)//根据ADC值判断5向按键键值
 145          {
 146   1      
 147   1        static unsigned char xdata cFlag5D=0;//保存连接读入的键值
 148   1        static unsigned char xdata c5DkeyLastTime=0;//保存上次按键值
 149   1      //  static unsigned char xdata cNumLastTime=6;//记录上次确认的键值  
 150   1        static unsigned char xdata cKeyPressNum;
 151   1        unsigned char c5DkeyNow=7;
 152   1      
 153   1        
 154   1      //  unsigned char c5DkeyNow=7;
 155   1      //  unsigned char i=0;
 156   1      //  //判断当前读入ADC对应的按键值
 157   1      
 158   1      //  思路与单个按键相似
 159   1        //根据AD值得到当前键值
 160   1        if(ADCValue<=KeyThreshold[0]) c5DkeyNow=0;
 161   1        else if (ADCValue>KeyThreshold[0] && ADCValue<=KeyThreshold[1]) c5DkeyNow=1;
 162   1        else if (ADCValue>KeyThreshold[1] && ADCValue<=KeyThreshold[2]) c5DkeyNow=2;
 163   1        else if (ADCValue>KeyThreshold[2] && ADCValue<=KeyThreshold[3]) c5DkeyNow=3;
 164   1        else if (ADCValue>KeyThreshold[3] && ADCValue<=KeyThreshold[4]) c5DkeyNow=4;
 165   1        else if (ADCValue>KeyThreshold[4] && ADCValue<=KeyThreshold[5]) c5DkeyNow=5;
 166   1        else  c5DkeyNow=6;
 167   1      
 168   1        //记录按键
 169   1        if(c5DkeyNow==6)//抬起，记录一次
 170   1          cFlag5D=(cFlag5D<<1)&0;//左移记录1次
 171   1        else if(c5DkeyNow==c5DkeyLastTime)//AD判断的键值与上次相同，
 172   1          cFlag5D=(cFlag5D<<1)|1;//左移记录1次
 173   1        else //特殊情况，本次非抬起，也与上次不同，基本不可能出现
 174   1          cFlag5D=(cFlag5D<<1)& 0;//左移记录1次
 175   1        
 176   1        c5DkeyLastTime=c5DkeyNow;//记录当前AD读的键值 
 177   1        
 178   1        //判断键值
C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 4   

 179   1        if(cFlag5D==0xFF)//连续8次读入一样
 180   1          cKeyPressNum=c5DkeyNow; //记录当前键值
 181   1        
 182   1        if(cFlag5D==0x00 && cKeyPressNum !=6 )//按键有效抬起，且前一次为有效按键
 183   1        {
 184   2          c5DkeyNow=cKeyPressNum; 
 185   2          cKeyPressNum=0x06;
 186   2          return c5DkeyNow;
 187   2        }
 188   1        else
 189   1          return 0x06;  
 190   1      
 191   1      }
 192          
 193          unsigned char* Hex2ASCII(unsigned long long28Value)//8位值转化为ASCII
 194          {
 195   1        unsigned char xdata cindexTempHex[8]={0,0,0,0,0,0,0,0};
 196   1        char xdata i=0;
 197   1        
 198   1        for(i=7;i>=0;i=i-2)//高位在前
 199   1        {
 200   2          cindexTempHex[i]=long28Value;//利用默认数据类型转换，char为8位，取出lont int 的低8位
 201   2          cindexTempHex[i-1]=cindexTempHex[i]>>4;//取出8位中高4位 
 202   2          cindexTempHex[i]=cindexTempHex[i]-(cindexTempHex[i-1]<<4);//取出8位中的低4位
 203   2          long28Value=long28Value>>8;//低8位处理完毕，右移      
 204   2        }
 205   1      //  S1SendData(0xAA);   
 206   1        for(i=0;i<=7;i++)
 207   1        {
 208   2      
 209   2      //    S1SendData(cindexTempHex[i]);   
 210   2          if(cindexTempHex[i]<=9) cindexTempHex[i]+=0x30;//小于9转成ASCII
 211   2          else cindexTempHex[i]=cindexTempHex[i]+55;//大于9的数转成ASCII    
 212   2      //    S1SendData(cindexTempHex[i]);     
 213   2        }
 214   1        cindexTempHex[8]=0;//数组后加一个结束符
 215   1      //  S1SendString(cindexTempHex);//
 216   1      //  S1SendData(13);
 217   1      //  S1SendData(10); 
 218   1        return cindexTempHex;
 219   1        
 220   1      }
 221          
 222          unsigned char* Hex2ASCII3Figure(unsigned int cNum)//3位十进制值转化为ASCII
 223          {
 224   1        //unsigned char xdata * cindexTempHex=0;//此句有错（语法上没有问题）
 225   1        unsigned char xdata cindexTempHex[3]={0,0,0};
 226   1        char xdata i=0;
 227   1        
 228   1        cindexTempHex[0]=cNum /100;//利用数据类型自动转换为整型
 229   1        cindexTempHex[1]=(cNum  - cindexTempHex[0] * 100) /10;  
 230   1        cindexTempHex[2]= cNum % 10;
 231   1        for(i=0;i<=3;i++) cindexTempHex[i]+= 0x30;//转成ASCII
 232   1        
 233   1      
 234   1        cindexTempHex[3]=0;//数组后加一个结束符
 235   1      //  S1SendString(cindexTempHex);//
 236   1      //  S1SendData(13);
 237   1      //  S1SendData(10); 
 238   1        return cindexTempHex;
 239   1        
 240   1      }
C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 5   

 241          
 242          //根据读入的FDC2214值，和FDC2214ThresholdValue[170]值，判断纸张张数
 243          unsigned int JudgePaperNum(unsigned long longFDC2214Value)
 244          {
 245   1        extern unsigned long xdata FDC2214ThresholdValue[170];//各数量纸张对应点的中点值作为阈值
 246   1        unsigned char cPaperNum=0,i=0;
 247   1        if(longFDC2214Value < FDC2214ThresholdValue[0])
 248   1          return(1);
 249   1        else
 250   1          for(i=1;i<169;i++)
 251   1          {
 252   2            if((longFDC2214Value >= FDC2214ThresholdValue[i-1]) && (longFDC2214Value < FDC2214ThresholdValue[i]) )
 253   2              return(i+1);//随着纸张增加，传感器值增加，"<"
 254   2          } 
 255   1        return(999);//显示999表示超出范围了
 256   1        
 257   1        
 258   1      }
 259          
 260          //unsigned char* Num2Speaker(unsigned int cNum)//将测量出的数据转换成发送的串口的音频字符串
 261          //{
 262          //  unsigned char xdata ctemp100=0,ctemp10=0,ctemp1=0;
 263          //  unsigned char * str1="B7:0";
 264          //  unsigned char * pt=str1;
 265          //  unsigned char * str2='\0';
 266          //  
 267          //    str1=str1+4;//B
 268          ////    * str1=0x37;str1++;//7
 269          ////    * str1=0x3A;str1++;//:
 270          ////    * str1=0x30;str1++;//0
 271          ////    * str1='\0';  
 272          
 273          //  if(cNum<10) 
 274          //  {
 275          //    *str1=((unsigned char)cNum+0x30);str1++;
 276          //    *str1='1';str1++;//张
 277          //    *str1='2';str1++;
 278          //    *str1='\0';
 279          //    S1SendString(str1); 
 280          //    return(pt);
 281          //    
 282          //  }
 283          //  else if(cNum<100)
 284          //  {
 285          //    ctemp10=cNum/10;
 286          //    ctemp1=cNum%10;
 287          //    *str1=(ctemp10+0x30);str1++;
 288          //    *str1=0x31;str1++;*str1=0x30;str1++;//十
 289          //    
 290          //  
 291          //    if(ctemp1 !=0)
 292          //    {   
 293          //      *str1=0x30;str1++;//0 
 294          //      *str1=ctemp1+0x30;str1++;
 295          //    }
 296          //    *str1='1';str1++;//张
 297          //    *str1='2';str1++;
 298          //    *str1='\0';
 299          //    return(pt);
 300          //  } 
 301          //  else if(cNum<=169)
 302          //  {
C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 6   

 303          //    ctemp100=cNum/100;  
 304          //    ctemp1=cNum % 10;
 305          //    ctemp10=(cNum-100)/10;  
 306          //    
 307          ////    S1SendData(cNum);   
 308          ////    S1SendData(ctemp100);
 309          ////    S1SendData(ctemp10);  
 310          ////    S1SendData(ctemp1);     
 311          ////    S1SendData(0xAA);     
 312          //    *str1=(ctemp100+0x30);str1++;
 313          //    *str1=0x31;str1++;*str1=0x31;str1++;//百
 314          //    
 315          //    if(ctemp10 !=0)
 316          //    {   
 317          //      *str1=0x30;str1++;*str1=ctemp10+0x30;str1++;//
 318          //      
 319          //      *str1=0x31;str1++;*str1=0x30;str1++;//十
 320          //    }
 321          //    else
 322          //    {
 323          //      *str1=0x31;str1++;*str1=0x33;str1++;//零
 324          //    }
 325          //    *str1=0x30;str1++;*str1=ctemp1+0x30;str1++;//
 326          //    
 327          //    *str1='1';str1++;//张
 328          //    *str1='2';str1++;
 329          //    *str1='\0';
 330          //    return(pt);   
 331          //  }   
 332          //  else 
 333          //    return("A7:00021");
 334          //  
 335          //}
 336          
 337          unsigned char* Num2Speaker(unsigned int cNum)//将测量出的数据转换成发送的串口的音频字符串
 338          {
 339   1        unsigned char xdata ctemp100=0,ctemp10=0,ctemp1=0;
 340   1        unsigned char xdata str1[]="B7:0";
 341   1        unsigned char xdata i=4;
 342   1        unsigned char * pt=str1;
 343   1        unsigned char * str2='\0';
 344   1        
 345   1      //    str1=str1+4;//B
 346   1      //    * str1=0x37;str1++;//7
 347   1      //    * str1=0x3A;str1++;//:
 348   1      //    * str1=0x30;str1++;//0
 349   1      //    * str1='\0';  
 350   1        if(cNum>169)  return("A7:00021");//超出测量范围
 351   1        else if (cNum==100)  return("B7:011112"); //一百张
 352   1        else if (cNum==10)  return("B7:1012");  //十张  
 353   1        else
 354   1        {
 355   2          ctemp100=cNum/100;  
 356   2          ctemp10=(cNum/10-10*ctemp100);    
 357   2          ctemp1=cNum % 10;   
 358   2          if(ctemp100>0) // >100的百位数
 359   2          {
 360   3            str1[i++]=ctemp100+0x30;//百位
 361   3            str1[i++]=0x31; str1[i++]=0x31;//百
 362   3          }
 363   2          else if(cNum >100 && (ctemp10==0) )// >100，中间为零
 364   2          {
C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 7   

 365   3            str1[i++]=0x31; str1[i++]=0x33;//零,
 366   3          }
 367   2          else if(ctemp10>0) // 十位，
 368   2          {
 369   3            str1[i++]=0x30; str1[i++]=ctemp10>+0x30;// N
 370   3            str1[i++]=0x31; str1[i++]=0x30;// 十
 371   3          }
 372   2          else if(ctemp1>0) // 个位，
 373   2          {
 374   3            str1[i++]=0x30; str1[i++]=ctemp10>+0x30;// N
 375   3          }   
 376   2          str1[i++]=0x31; str1[i++]=0x32;str1[i]='\0';// 张 
 377   2          return(str1);
 378   2        }
 379   1        
 380   1      
 381   1      
 382   1      
 383   1          
 384   1        
 385   1        
 386   1        if(cNum<10) 
 387   1        {
 388   2          str1[i++]=((unsigned char)ctemp1+0x30);
 389   2          str1[i++]='1';//张
 390   2          str1[i++]='2';
 391   2          str1[i++]='\0';
 392   2          S1SendString(str1); 
 393   2          return(str1);
 394   2          
 395   2        }
 396   1      //  else if(cNum<100)
 397   1      //  {
 398   1      //    ctemp10=cNum/10;
 399   1      //    ctemp1=cNum%10;
 400   1      //    *str1=(ctemp10+0x30);str1++;
 401   1      //    *str1=0x31;str1++;*str1=0x30;str1++;//十
 402   1      //    
 403   1      //  
 404   1      //    if(ctemp1 !=0)
 405   1      //    {   
 406   1      //      *str1=0x30;str1++;//0 
 407   1      //      *str1=ctemp1+0x30;str1++;
 408   1      //    }
 409   1      //    *str1='1';str1++;//张
 410   1      //    *str1='2';str1++;
 411   1      //    *str1='\0';
 412   1      //    return(pt);
 413   1      //  } 
 414   1      //  else if(cNum<=169)
 415   1      //  {
 416   1      //    ctemp100=cNum/100;  
 417   1      //    ctemp1=cNum % 10;
 418   1      //    ctemp10=(cNum-100)/10;  
 419   1      //    
 420   1      ////    S1SendData(cNum);   
 421   1      ////    S1SendData(ctemp100);
 422   1      ////    S1SendData(ctemp10);  
 423   1      ////    S1SendData(ctemp1);     
 424   1      ////    S1SendData(0xAA);     
 425   1      //    *str1=(ctemp100+0x30);str1++;
 426   1      //    *str1=0x31;str1++;*str1=0x31;str1++;//百
C51 COMPILER V9.55   MYSELF                                                                10/15/2019 20:57:25 PAGE 8   

 427   1      //    
 428   1      //    if(ctemp10 !=0)
 429   1      //    {   
 430   1      //      *str1=0x30;str1++;*str1=ctemp10+0x30;str1++;//
 431   1      //      
 432   1      //      *str1=0x31;str1++;*str1=0x30;str1++;//十
 433   1      //    }
 434   1      //    else
 435   1      //    {
 436   1      //      *str1=0x31;str1++;*str1=0x33;str1++;//零
 437   1      //    }
 438   1      //    *str1=0x30;str1++;*str1=ctemp1+0x30;str1++;//
 439   1      //    
 440   1      //    *str1='1';str1++;//张
 441   1      //    *str1='2';str1++;
 442   1      //    *str1='\0';
 443   1      //    return(pt);   
 444   1      //  }   
 445   1      //  else 
 446   1      //    return("A7:00021");
 447   1        
 448   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1482    ----
   CONSTANT SIZE    =     50    ----
   XDATA SIZE       =     10      23
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
