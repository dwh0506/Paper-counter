C51 COMPILER V9.55   MYSELF                                                                09/30/2019 11:28:34 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MYSELF
OBJECT MODULE PLACED IN .\Objects\myself.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE myself.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\SYSTEM;..\HARDWARE;..\USER) 
                    -DEBUG OBJECTEXTEND PRINT(.\Listings\myself.lst) TABS(2) OBJECT(.\Objects\myself.obj)

line level    source

   1          #include  "config.h"
   2          #include  "intrins.h"
   3          #include  "Serial.h"//串口1(P3.0/RxD, P3.1/TxD)
   4          #include <myself.h>
   5          #include  "STC8EEPROM.h"
   6          
   7          bit bFlagTimer0=0,bFlag2ms;
   8          bit TestKeyLastTime=1;
   9          unsigned char xdata cJudgeKey=0;//用于判断按键的变量
  10          unsigned char T0Counter2ms=0;
  11          
  12          unsigned char xdata KeyNum[3]={0,0,0};//存放连续3次判断的键值
  13          unsigned char code KeyThreshold[7]={0x38,0x8D,0xBA,0xD6,0xE9,0xF8,0xFF};
  14          //  键名        电压值    测量AD值      键值区间     阈值
  15          //0 KeyStartStop 0        0x00      0x00-0x38   0x38    
  16          //1 KeyDown     1/2Vcc    0x71      0x39-0x8D   0x8D  
  17          //2 KeyMiddle   2/3Vcc    0xA9      0x8E-0xBA   0xBA
  18          //3 KeyRight    3/4Vcc    0xCB      0xBB-0xD6   0xD6
  19          //4 KeyLeft     4/5Vcc    0xE1      0xD7-0xE9   0xE9
  20          //5 KeyUp       5/6Vcc    0xF1      0xEA-0xF8   0xF8
  21          //6 NoneKey       Vcc     0xFF      0xF8-0xFF   0xFF
  22          
  23          
  24          
  25          
  26          
  27          
  28          void DelayNms110592M(int n)//延时Nms//@@11.0592MHz
  29          {
  30   1        unsigned int i;
  31   1        for(i=0;i<n;i++)
  32   1          Delay1ms110592M();
  33   1      }
  34          void DelayNms24MHz(int n)//延时Nms//@24MHz
  35          {
  36   1        unsigned int i;
  37   1        for(i=0;i<n;i++)
  38   1          Delay1ms24MHz();
  39   1      }
  40          
  41          
  42          void Delay1ms110592M()    //@11.0592MHz
  43          {
  44   1        unsigned char i, j;
  45   1      
  46   1        i = 15;
  47   1        j = 90;
  48   1        do
  49   1        {
  50   2          while (--j);
  51   2        } while (--i);
  52   1      }
  53          
  54          void Delay1ms24MHz()    //@24.000MHz
C51 COMPILER V9.55   MYSELF                                                                09/30/2019 11:28:34 PAGE 2   

  55          {
  56   1        unsigned char i, j;
  57   1      
  58   1        _nop_();
  59   1        i = 32;
  60   1        j = 40;
  61   1        do
  62   1        {
  63   2          while (--j);
  64   2        } while (--i);
  65   1      }
  66          void SysClkInit()//系统时钟初始化
  67          {
  68   1      
  69   1      /**********************************************************/
  70   1      /////////选择系统时钟源
  71   1          P_SW2 = 0x80;
  72   1          CKSEL = 0x00;                               //选择内部IRC ( 默认 )
  73   1          P_SW2 = 0x00;
  74   1          
  75   1        
  76   1        
  77   1       //选择外部晶振作为系统时钟 
  78   1      //    P_SW2 = 0x80;
  79   1      //    XOSCCR = 0xc0;                              //启动外部晶振,11.0592MHz
  80   1      //    while (!(XOSCCR & 1));                      //等待时钟稳定
  81   1      //    CLKDIV = 0x00;                               //时钟不分频
  82   1      //    CKSEL = 0x01;                              
  83   1      //    P_SW2 = 0x00;
  84   1      /*********************************************************/ 
  85   1      }
  86            
  87          
  88          void Timer0Init(void)   //1毫秒@24.000MHz
  89          {
  90   1      
  91   1        AUXR |= 0x80;   //定时器时钟1T模式
  92   1        TMOD &= 0xF0;   //设置定时器模式
  93   1        TL0 = 0x40;   //设置定时初值
  94   1        TH0 = 0xA2;   //设置定时初值
  95   1        TF0 = 0;    //清除TF0标志
  96   1        TR0 = 1;    //定时器0开始计时
  97   1        ET0 = 1;  //使能定时器0中断 
  98   1      }
  99          
 100          void Timer0Interrupt() interrupt 1 using 2 //定时器0的中断
 101          {
 102   1       unsigned char xdata i=0;
 103   1        ADC_CONTR |= ADC_START;                          //启动ADC转换  
 104   1        
 105   1        T0Counter2ms++;
 106   1      
 107   1        if(T0Counter2ms>=2)
 108   1        {
 109   2          bFlag2ms=1;
 110   2          T0Counter2ms=0;
 111   2        }
 112   1      }
 113          
 114          
 115          
 116          //按键读下连续读8次（间隔2ms）,如全为按下cJudgeKey==0x00，记录到TestKeyLastTime中
C51 COMPILER V9.55   MYSELF                                                                09/30/2019 11:28:34 PAGE 3   

 117          //在下一个连续读8次，如全为抬起cJudgeKey==0xFF，且前一状态为按下，
 118          //确认此时为按键有效按下，且有效抬起，进行相应的操作
 119          bit KeyPress(bit KeyIO)
 120          {
 121   1        cJudgeKey=(cJudgeKey<<1) | KeyIO; // 判断值左移一位 ，并将当前扫描值入最低
 122   1        if(cJudgeKey==0x00)//按键按下，状态稳定。KeyIO按下为0，抬起为1
 123   1        {
 124   2          TestKeyLastTime=KeyIO;//记录状态
 125   2        }
 126   1        else if((cJudgeKey==0xFF) && (TestKeyLastTime!=KeyIO))//按键从按下到抬起，稳定
 127   1        {
 128   2          TestKeyLastTime=KeyIO;
 129   2          
 130   2          return 1;
 131   2        }     
 132   1        else 
 133   1        {
 134   2      
 135   2        }
 136   1        return 0;
 137   1      }
 138          
 139          
 140          
 141          unsigned char JudgeKeyNum(unsigned char ADCValue)//根据ADC值判断5向按键键值
 142          {
 143   1      
 144   1        static unsigned char xdata cFlag5D=0;//保存连接读入的键值
 145   1        static unsigned char xdata c5DkeyLastTime=0;//保存上次按键值
 146   1      //  static unsigned char xdata cNumLastTime=6;//记录上次确认的键值  
 147   1        static unsigned char xdata cKeyPressNum;
 148   1        unsigned char c5DkeyNow=7;
 149   1      
 150   1        
 151   1      //  unsigned char c5DkeyNow=7;
 152   1      //  unsigned char i=0;
 153   1      //  //判断当前读入ADC对应的按键值
 154   1      
 155   1      //  思路与单个按键相似
 156   1        //根据AD值得到当前键值
 157   1        if(ADCValue<=KeyThreshold[0]) c5DkeyNow=0;
 158   1        else if (ADCValue>KeyThreshold[0] && ADCValue<=KeyThreshold[1]) c5DkeyNow=1;
 159   1        else if (ADCValue>KeyThreshold[1] && ADCValue<=KeyThreshold[2]) c5DkeyNow=2;
 160   1        else if (ADCValue>KeyThreshold[2] && ADCValue<=KeyThreshold[3]) c5DkeyNow=3;
 161   1        else if (ADCValue>KeyThreshold[3] && ADCValue<=KeyThreshold[4]) c5DkeyNow=4;
 162   1        else if (ADCValue>KeyThreshold[4] && ADCValue<=KeyThreshold[5]) c5DkeyNow=5;
 163   1        else  c5DkeyNow=6;
 164   1      
 165   1        //记录按键
 166   1        if(c5DkeyNow==6)//抬起，记录一次
 167   1          cFlag5D=(cFlag5D<<1)&0;//左移记录1次
 168   1        else if(c5DkeyNow==c5DkeyLastTime)//AD判断的键值与上次相同，
 169   1          cFlag5D=(cFlag5D<<1)|1;//左移记录1次
 170   1        else //特殊情况，本次非抬起，也与上次不同，基本不可能出现
 171   1          cFlag5D=(cFlag5D<<1)& 0;//左移记录1次
 172   1        
 173   1        c5DkeyLastTime=c5DkeyNow;//记录当前AD读的键值 
 174   1        
 175   1        //判断键值
 176   1        if(cFlag5D==0xFF)//连续8次读入一样
 177   1          cKeyPressNum=c5DkeyNow; //记录当前键值
 178   1        
C51 COMPILER V9.55   MYSELF                                                                09/30/2019 11:28:34 PAGE 4   

 179   1        if(cFlag5D==0x00 && cKeyPressNum !=6 )//按键有效抬起，且前一次为有效按键
 180   1        {
 181   2          c5DkeyNow=cKeyPressNum; 
 182   2          cKeyPressNum=0x06;
 183   2          return c5DkeyNow;
 184   2        }
 185   1        else
 186   1          return 0x06;  
 187   1      
 188   1      }
 189          
 190          unsigned char* Hex2ASCII(unsigned long long28Value)//8位值转化为ASCII
 191          {
 192   1        unsigned char xdata * cindexTempHex=0;
 193   1        char xdata i=0;
 194   1        
 195   1        for(i=7;i>=0;i=i-2)//高位在前
 196   1        {
 197   2          cindexTempHex[i]=long28Value;//利用默认数据类型转换，char为8位，取出lont int 的低8位
 198   2          cindexTempHex[i-1]=cindexTempHex[i]>>4;//取出8位中高4位 
 199   2          cindexTempHex[i]=cindexTempHex[i]-(cindexTempHex[i-1]<<4);//取出8位中的低4位
 200   2          long28Value=long28Value>>8;//低8位处理完毕，右移      
 201   2        }
 202   1      //  S1SendData(0xAA);   
 203   1        for(i=0;i<=7;i++)
 204   1        {
 205   2      
 206   2      //    S1SendData(cindexTempHex[i]);   
 207   2          if(cindexTempHex[i]<=9) cindexTempHex[i]+=0x30;//小于9转成ASCII
 208   2          else cindexTempHex[i]=cindexTempHex[i]+55;//大于9的数转成ASCII    
 209   2      //    S1SendData(cindexTempHex[i]);     
 210   2        }
 211   1        cindexTempHex[8]=0;//数组后加一个结束符
 212   1      //  S1SendString(cindexTempHex);//
 213   1      //  S1SendData(13);
 214   1      //  S1SendData(10); 
 215   1        return cindexTempHex;
 216   1        
 217   1      }
 218          
 219          unsigned char* Hex2ASCII3Figure(unsigned int cNum)//3位十进制值转化为ASCII
 220          {
 221   1        unsigned char xdata * cindexTempHex=0;
 222   1        char xdata i=0;
 223   1        
 224   1        cindexTempHex[0]=cNum /100;//利用数据类型自动转换为整型
 225   1        cindexTempHex[1]=(cNum  - cindexTempHex[0] * 100) /10;  
 226   1        cindexTempHex[2]= cNum % 10;
 227   1        for(i=0;i<=3;i++) cindexTempHex[i]+= 0x30;//转成ASCII
 228   1        
 229   1      
 230   1        cindexTempHex[3]=0;//数组后加一个结束符
 231   1      //  S1SendString(cindexTempHex);//
 232   1      //  S1SendData(13);
 233   1      //  S1SendData(10); 
 234   1        return cindexTempHex;
 235   1        
 236   1      }
 237          
 238          //根据读入的FDC2214值，和FDC2214ThresholdValue[170]值，判断纸张张数
 239          unsigned int JudgePaperNum(unsigned long longFDC2214)
 240          {
C51 COMPILER V9.55   MYSELF                                                                09/30/2019 11:28:34 PAGE 5   

 241   1        extern unsigned long xdata FDC2214ThresholdValue[170];//各数量纸张对应点的中点值作为阈值
 242   1        unsigned char cPaperNum=0,i=0;
 243   1        for(i=0;i<=169;i++)
 244   1        {
 245   2          if(longFDC2214 < FDC2214ThresholdValue[i])return(i+1);//要根据测量数据来确定比较是">"还是"<"
 246   2        } 
 247   1        return(999);//显示999表示超出范围了
 248   1        
 249   1        
 250   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    901    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =      7       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
